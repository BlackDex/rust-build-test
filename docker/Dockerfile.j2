# syntax=docker/dockerfile:1

# This file was generated using a Jinja2 template.
# Please make your changes in `Dockerfile.j2` and then `make` the individual Dockerfiles.

{% set build_stage_base_image = "rust:1.54" %}
{% if "alpine" in target_file %}
{%   if "amd64" in target_file %}
{%     set build_stage_base_image = "blackdex/rust-musl:x86_64-musl" %}
{%     set runtime_stage_base_image = "alpine:3.14" %}
{%     set package_arch_target = "x86_64-unknown-linux-musl" %}
{%   elif "armv7" in target_file %}
{%     set build_stage_base_image = "blackdex/rust-musl:armv7-musleabihf" %}
{%     set runtime_stage_base_image = "balenalib/armv7hf-alpine:3.14" %}
{%     set package_arch_target = "armv7-unknown-linux-musleabihf" %}
{%   endif %}
{% elif "amd64" in target_file %}
{%   set runtime_stage_base_image = "debian:buster-slim" %}
{% elif "arm64" in target_file %}
{%   set runtime_stage_base_image = "balenalib/aarch64-debian:buster" %}
{%   set package_arch_name = "arm64" %}
{%   set package_arch_target = "aarch64-unknown-linux-gnu" %}
{%   set package_cross_compiler = "aarch64-linux-gnu" %}
{% elif "armv6" in target_file %}
{%   set runtime_stage_base_image = "balenalib/rpi-debian:buster" %}
{%   set package_arch_name = "armel" %}
{%   set package_arch_target = "arm-unknown-linux-gnueabi" %}
{%   set package_cross_compiler = "arm-linux-gnueabi" %}
{% elif "armv7" in target_file %}
{%   set runtime_stage_base_image = "balenalib/armv7hf-debian:buster" %}
{%   set package_arch_name = "armhf" %}
{%   set package_arch_target = "armv7-unknown-linux-gnueabihf" %}
{%   set package_cross_compiler = "arm-linux-gnueabihf" %}
{% endif %}
{% if package_arch_name is defined %}
{%   set package_arch_prefix = ":" + package_arch_name %}
{% else %}
{%   set package_arch_prefix = "" %}
{% endif %}
{% if package_arch_target is defined %}
{%   set package_arch_target_param = " --target=" + package_arch_target %}
{% else %}
{%   set package_arch_target_param = "" %}
{% endif %}
# Using multistage build:
# 	https://docs.docker.com/develop/develop-images/multistage-build/
# 	https://whitfin.io/speeding-up-rust-docker-builds/

########################## BUILD IMAGE  ##########################
FROM {{ build_stage_base_image }} as build

ENV CARGO_HOME "/root/.cargo"
ENV USER "root"

# Build time options to avoid dpkg warnings and help with reproducible builds.
ENV DEBIAN_FRONTEND=noninteractive LANG=C.UTF-8 TZ=UTC TERM=xterm-256color

# Don't download rust docs
RUN --mount=type=cache,target=/root/.cargo/git --mount=type=cache,target=/root/.cargo/registry \
    rustup set profile minimal

{% if "alpine" in target_file %}
ENV RUSTFLAGS='-C link-arg=-s'
{%   if "armv7" in target_file %}
ENV CFLAGS_armv7_unknown_linux_musleabihf="-mfpu=vfpv3-d16"
{%   endif %}
{% elif "arm" in target_file %}
# Install required build libs for {{ package_arch_name }} architecture.
# To compile both mysql and postgresql we need some extra packages for both host arch and target arch
RUN sed 's/^deb/deb-src/' /etc/apt/sources.list > \
        /etc/apt/sources.list.d/deb-src.list \
    && dpkg --add-architecture {{ package_arch_name }} \
    && apt-get update \
    && apt-get install -y \
        libssl-dev{{ package_arch_prefix }} \
        libc6-dev{{ package_arch_prefix }} \
        libpq5{{ package_arch_prefix }} \
        libpq-dev \
        gcc-{{ package_cross_compiler }} \
        --no-install-recommends \
    && echo '[target.{{ package_arch_target }}]' >> /root/.cargo/config \
    && echo 'linker = "{{ package_cross_compiler }}-gcc"' >> /root/.cargo/config \
    && echo 'rustflags = ["-L/usr/lib/{{ package_cross_compiler }}"]' >> /root/.cargo/config
{% endif -%}

{% if "amd64" in target_file and "alpine" not in target_file %}
# Install DB packages
RUN apt-get update && apt-get install -y \
    --no-install-recommends \
    {# libmariadb-dev{{ package_arch_prefix }} \ #}
    libpq-dev{{ package_arch_prefix }} \
    && rm -rf /var/lib/apt/lists/*
{% endif %}

# Creates a dummy project used to grab dependencies
RUN USER=root cargo new --bin /app
WORKDIR /app

# Copies over *only* your manifests and build files
COPY ./Cargo.* ./
{# COPY ./rust-toolchain ./rust-toolchain #}
{# COPY ./build.rs ./build.rs #}


{% if "arm" in target_file and "alpine" not in target_file %}
# Configure cross-compile on default rust build image
ENV CC_{{ package_arch_target | replace("-", "_") }}="/usr/bin/{{ package_cross_compiler }}-gcc"
ENV CROSS_COMPILE="1"
ENV OPENSSL_INCLUDE_DIR="/usr/include/{{ package_cross_compiler }}"
ENV OPENSSL_LIB_DIR="/usr/lib/{{ package_cross_compiler }}"

# For Diesel-RS migrations_macros to compile with PostgreSQL we need to do some magic.
# The libpq5{{ package_arch_prefix }} package seems to not provide a symlink to libpq.so.5 with the name libpq.so.
# This is only provided by the libpq-dev package which can't be installed for both arch at the same time.
# Without this specific file the ld command will fail and compilation fails with it.
RUN ln -sfnr /usr/lib/{{ package_cross_compiler }}/libpq.so.5 /usr/lib/{{ package_cross_compiler }}/libpq.so
{% endif %}

{% if package_arch_target is defined %}
RUN --mount=type=cache,target=/root/.cargo/git --mount=type=cache,target=/root/.cargo/registry \
    rustup target add {{ package_arch_target }}
{% endif %}

# Builds your dependencies and removes the
# dummy project, except the target folder
# This folder contains the compiled dependencies
RUN --mount=type=cache,target=/root/.cargo/git --mount=type=cache,target=/root/.cargo/registry \
    cargo build --release{{ package_arch_target_param }} \
    && find . -not -path "./target*" -delete

# Copies the complete project
# To avoid copying unneeded files, use .dockerignore
COPY . .

# Make sure that we actually build the project
RUN touch src/main.rs

# Builds again, this time it'll just be
# your actual source files being built
RUN --mount=type=cache,target=/root/.cargo/git --mount=type=cache,target=/root/.cargo/registry \
    cargo build --release{{ package_arch_target_param }}


######################## RUNTIME IMAGE  ########################
# Create a new stage with a minimal image
# because we already have a binary built
FROM {{ runtime_stage_base_image }}

{% if "alpine" in runtime_stage_base_image %}
ENV SSL_CERT_DIR=/etc/ssl/certs
{% endif %}

{% if "amd64" not in target_file %}
# hadolint ignore=DL3059
RUN [ "cross-build-start" ]
{% endif %}

# Install needed libraries (just a test case here)
{% if "alpine" in runtime_stage_base_image %}
RUN apk add --no-cache \
    openssl \
    tzdata \
    curl \
    dumb-init \
    postgresql-libs \
    ca-certificates
{% else %}
RUN apt-get update && apt-get install -y \
    --no-install-recommends \
    openssl \
    ca-certificates \
    curl \
    dumb-init \
    libpq5 \
    && rm -rf /var/lib/apt/lists/*
{% endif %}

{% if "amd64" not in target_file %}
# hadolint ignore=DL3059
RUN [ "cross-build-end" ]
{% endif %}

# Copies the files from the context (Rocket.toml file and web-vault)
# and the binary from the "build" stage to the current stage
WORKDIR /
{% if package_arch_target is defined %}
COPY --from=build /app/target/{{ package_arch_target }}/release/dieselpgcrate .
{% else %}
COPY --from=build /app/target/release/dieselpgcrate .
{% endif %}

# Configures the startup!
ENTRYPOINT ["/usr/bin/dumb-init", "--"]
CMD ["/dieselpgcrate"]
